require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/payment_requests", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # PaymentRequest. As you add validations to PaymentRequest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {amount: 5, currency: "USD", description: "contractor payment request"}
  }

  let(:invalid_attributes) {
    {amount: nil, description: "contractor payment request invalid attrs"}
  }

  describe "GET /index" do
    it "renders a successful response" do
      PaymentRequest.create! valid_attributes
      get payment_requests_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      payment_request = PaymentRequest.create! valid_attributes
      get payment_request_url(payment_request)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      payment_request = PaymentRequest.create! valid_attributes
      get edit_payment_request_url(payment_request)
      expect(response).to be_successful
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {amount: 6, currency: "USD", description: "contractor payment request"}
      }

      it "updates the requested payment_request" do
        payment_request = PaymentRequest.create! valid_attributes
        patch payment_request_url(payment_request), params: {payment_request: new_attributes}
        payment_request.reload
        expect(response).to redirect_to(payment_request_url(payment_request))
      end

      it "redirects to the payment_request" do
        payment_request = PaymentRequest.create! valid_attributes
        patch payment_request_url(payment_request), params: {payment_request: new_attributes}
        payment_request.reload
        expect(response).to redirect_to(payment_request_url(payment_request))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        payment_request = PaymentRequest.create! valid_attributes
        patch payment_request_url(payment_request), params: {payment_request: invalid_attributes}
        expect(response).not_to be_successful
      end
    end
  end

  describe "PATCH /approve" do
    context "with action" do
      it "approve the requested payment_request" do
        payment_request = PaymentRequest.create! valid_attributes
        patch approve_payment_request_url(payment_request)
        payment_request.reload
        expect(response).to redirect_to(payment_request_url(payment_request))
      end
    end
  end

  describe "PATCH /reject" do
    context "with action" do
      it "reject the requested payment_request" do
        payment_request = PaymentRequest.create! valid_attributes
        patch reject_payment_request_url(payment_request)
        payment_request.reload
        expect(response).to redirect_to(payment_request_url(payment_request))
      end
    end
  end
end
